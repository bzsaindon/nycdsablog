summary(fit300)
sig(fit300)
fit201 =  Arima(hare, order = c(2, 0, 1))
summary(fit201)
sig(fit201)
?sig()
fit301 = Arima(hare, order = c(3, 0, 1))
summary(fit301)
sig(fit301)
fit202 = Arima(hare, order = c(2, 0, 2))
summary(fit202)
sig(fit202)
sig = function(model) {
return((1 - pnorm(abs(model$coef)/sqrt(diag(model$var.coef))))*2, 3)
}
sig(fit202)
sig = function(model) {
return(round((1 - pnorm(abs(model$coef)/sqrt(diag(model$var.coef))))*2, 3))
}
sig(fit202)
AIC(fit200, fit300, fit201)
BIC(fit200, fit300, fit201)
plot(as.vector(fitted(fit200)), fit200$residuals)
abline(h = 0, lty = 2)
qqnorm(fit200$residuals)
qqline(fit200$residuals)
acf(fit200$residuls)
Acf(fit200$residuls)
Acf(fit200$residuals)
Pacf(fit200$residuals)
Box.test(fit200$residuals, type = "Ljung-Box")
new.values = fprecast(fit200, 10, level = c(60, 80, 95))
new.values = forecast(fit200, 10, level = c(60, 80, 95))
new.values
new.values = forecast(fit200, 10)
new.values
new.values = forecast(fit200, 10, level = c(60, 80, 95))
new.values
plot(new.values)
data("WWWusage")
plot(WWWusage)
ndiffs(WWWusage)
adf.test(WWWusage)
dWWWusage = diff(WWWusage, differences = 1)
adf.test(dWWWusage)
plot(dWWWusage, main = "WWWusage\n1 Difference")
dWWWusage = diff(WWWusage, differences = 2)
adf.test(dWWWusage)
plot(dWWWusage, main = "WWWusage\n2 Difference")
dWWWusage = diff(WWWusage, differences = 10)
adf.test(dWWWusage)
plot(dWWWusage, main = "WWWusage\n2 Difference")
plot(dWWWusage, main = "WWWusage\n2 Difference")
dWWWusage = diff(WWWusage, differences = 1)
adf.test(dWWWusage)
plot(dWWWusage, main = "WWWusage\n1 Difference")
adf.test(dWWWusage)
dWWWusage = diff(WWWusage, differences = 2)
adf.test(dWWWusage)
plot(dWWWusage, main = "WWWusage\n2 Difference")
ndiffs(hare)
Acf(d2WWWusage)
d2WWWusage = diff(WWWusage, differences = 2)
Acf(d2WWWusage)
Pacf(d2WWWusage)
Pacf(d2WWWusage)
fit200 = Arima(WWWusage, order = c(1, 2, 1))
summary(fit200)
fit121 = Arima(WWWusage, order = c(1, 2, 1))
summary(fit200)
sig(fit121)
fit221 = Arima(WWWusage, order = c(2, 2, 1))
summary(fit221)
sig(fit221)
fit220 = Arima(WWWusage, order = c(2, 2, 0))
summary(fit220)
sig(fit220)
fit020 = Arima(WWWusage, order = c(0, 2, 0))
summary(fit020)
sig(fit020)
Acf(fit121$residuals)
Pacf(fit121$residuals)
Box.test(fit220$residuals, type = "Ljung-Box")
Acf(fit221$residuals)
Pacf(fit221$residuals)
Acf(fit220$residuals)
Pacf(fit220$residuals)
Box.test(fit220$residuals, type = "Ljung-Box")
Box.test(fit221$residuals, type = "Ljung-Box")
sig(fit121)
sig(fit221)
sig(fit220)
summary(fit220)
Pacf(d2WWWusage)
Acf(fit321$residuals)
fit321 = Arima(WWWusage, order = c(3, 2, 1))
summary(fit321)
sig(fit321)
fit421 = Arima(WWWusage, order = c(4, 2, 1))
summary(fit421)
sig(fit421)
Acf(fit321$residuals)
Pacf(fit321$residuals)
Box.test(fit321$residuals, type = "Ljung-Box")
sig(fit321)
fit322 = Arima(WWWusage, order = c(3, 2, 2))
summary(fit322)
sig(fit322)
sig(fit321)
Acf(fit321$residuals)
Pacf(fit321$residuals)
Box.test(fit321$residuals, type = "Ljung-Box")
sig(fit321)
AIC(fit221, fit321)
BIC(fit221, fit321)
summary(fit321)
plot(as.vector(fitted(fit321)), fit321$residuals)
abline(h = 0, lty = 2)
qqnorm(fit321$residuals)
qqline(fit321$residuals)
Acf(fit321$residuals)
Pacf(fit321$residuals)
Box.test(fit321$residuals, type = "Ljung-Box")
new.wwwusage = forecast(fit321, 10, level = c(60, 80, 95))
new.wwwusage
plot(new.wwwusage)
new.wwwusage = forecast(fit321, 100, level = c(60, 80, 95))
plot(new.wwwusage)
new.wwwusage = forecast(fit321, 10, level = c(60, 80, 95))
plot(new.wwwusage)
new.wwwusage = forecast(fit321, 100, level = c(60, 80, 95))
plot(new.wwwusage)
new.wwwusage = forecast(fit321, 1000, level = c(60, 80, 95))
plot(new.wwwusage)
new.wwwusage = forecast(fit321, 10, level = c(60, 80, 95))
new.wwwusage = forecast(fit321, 10, level = c(60, 80, 95))
plot(new.wwwusage)
plot(nhtemp)
ndiffs(nhtemp)
adf.test(nhtemp)
d2nhtemp = diff(nhtemp, differences = 2)
adf.test(d2nhtemp)
plot(d2nhtemp, main = "nhtemp\n2 Difference")
d1nhtemp = diff(nhtemp, differences = 1)
adf.test(d1nhtemp)
ndiffs(nhtemp)
adf.test(nhtemp)
d1nhtemp = diff(nhtemp, differences = 1)
adf.test(d1nhtemp)
plot(d1nhtemp, main = "nhtemp\n2 Difference")
d1nhtemp = diff(nhtemp, differences = 1)
adf.test(d1nhtemp)
plot(d1nhtemp, main = "nhtemp\n1 Difference")
d2nhtemp = diff(nhtemp, differences = 2)
adf.test(d2nhtemp)
d2nhtemp = diff(nhtemp, differences = 2)
adf.test(d2nhtemp)
plot(d2nhtemp, main = "nhtemp\n2 Difference")
adf.test(d1nhtemp)
Acf(nhtemp)
Pacf(nhtemp)
Pacf(nhtemp)
Acf(nhtemp)
fit111 = Arima(nhtemp, order=c(1, 1, 1))
summary(fit111)
sig(fit111)
fit211 = Arima(nhtemp, order=c(2, 1, 1))
summary(fit211)
sig(fit211)
fit311 = Arima(nhtemp, order=c(3, 1, 1))
summary(fit311)
sig(fit311)
fit121 = Arima(nhtemp, order=c(1, 2, 1))
summary(fit121)
sig(fit121)
fit122 = Arima(nhtemp, order=c(1, 2, 2))
summary(fit122)
sig(fit122)
sig(fit111)
Pacf(d1nhtemp)
Pacf(d1nhtemp)
Acf(d1nhtemp)
fit210 = Arima(nhtemp, order=c(2, 1, 0))
summary(fit210)
sig(fit210)
fit310 = Arima(nhtemp, order=c(3, 1, 0))
summary(fit310)
sig(fit310)
fit211 = Arima(nhtemp, order=c(2, 1, 1))
summary(fit211)
sig(fit211)
Acf(fit220$residuals)
Pacf(fit220$residuals)
Acf(fit210$residuals)
Pacf(fit210$residuals)
Box.test(fit210$residuals, type = "Ljung-Box")
sig(fit210)
AIC(fit210, fit211)
BIC(fit210, fit211)
plot(as.vector(fitted(fit221)), fit221$residuals)
abline(h = 0, lty = 2)
qqnorm(fit221$residuals)
qqline(fit221$residuals)
qqline(fit221$residuals)
Acf(fit221$residuals)
Pacf(fit221$residuals)
Box.test(fit221$residuals, type = "Ljung-Box")
new.nhtemp = forecast(fit221, 10, level = c(60, 80, 95))
new.nhtemp
plot(new.nhtemp)
plot(as.vector(fitted(fit210)), fit210$residuals)
abline(h = 0, lty = 2)
qqnorm(fit210$residuals)
qqline(fit210$residuals)
Acf(fit210$residuals)
Pacf(fit210$residuals)
Box.test(fit210$residuals, type = "Ljung-Box")
new.nhtemp = forecast(fit210, 10, level = c(60, 80, 95))
new.nhtemp
plot(new.nhtemp)
new.nhtemp = forecast(fit210, 10, level = c(1000, 80, 95))
new.nhtemp = forecast(fit210, 100, level = c(60, 80, 95))
plot(new.nhtemp)
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/muschapp")
library(shiny)
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/muschapp")
construct.geocode.url <- function(address, return.call = "json", sensor = "false") {
root <- "http://maps.google.com/maps/api/geocode/"
u <- paste(root, return.call, "?address=", address, "&sensor=", sensor, sep = "")
return(URLencode(u))
}
gGeoCode <- function(address,verbose=FALSE) {
if(verbose) cat(address,"\n")
u <- construct.geocode.url(address)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
return(c(lat, lng))
} else {
return(c(NA,NA))
}
}
gGeoState <- function(address,verbose=FALSE) {
if(verbose) cat(address,"\n")
u <- construct.geocode.url(address)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
return(x)
} else {
return(NULL)
}
}
# $address_components[[5]]$short_name
load("/Users/joshkelsey/Downloads/Medicare_Data.Rda")
proc <- sort(unique(data$DRG.Definition))
data$locationvar <- paste0(data$lat, ":", data$long)
df <- data
allstates <- state.abb
shinyServer(function(input, output) {
#   print(input$proc)
dataset <- reactive({
print(input$proc)
df <- data[data$DRG.Definition == input$proc, ]
})
#   myYear <- reactive({
#     input$Year
#   })
output$add <- renderText({
paste("Hospitals in", input$state)
})
output$para <- renderText({
"Text"
})
output$Controls <- renderUI({
#     df <- dataset()
#     ra <- range(df$Average.Total.Payments, na.rm=TRUE)
#     if (all(is.na(ra)) | all(is.infinite(ra))) ra <- c(0, 1)
#     print(ra)
list(
selectInput("state", "Select State", c("USA", allstates), selected="USA"),
selectInput("proc", "Please Select Procedure Category", proc, selected=proc[1])
)
})
output$Ranges <- renderUI({
df <- dataset()
ra <- range(df$Average.Total.Payments, na.rm=TRUE)
if (all(is.na(ra)) | all(is.infinite(ra))) ra <- c(0, 1)
print(ra)
list(
numericInput("minrange", "Minimum Average Payments ($)", ra[1], min = ra[1], max = ra[2],
step = 1000),
numericInput("maxrange", "Maximum Average Payments ($)", ra[2], min = ra[1], max = ra[2],
step = 1000)
)
})
output$gvis <- renderGvis({
df <- dataset()
# print(head(df))
#     print(input$address)
#     dd <- gGeoState(input$address)
#     print(head(dd))
#      state <- ifelse(is.null(dd), NA, dd$address_components[[5]]$short_name)
#
#     print(state)
state <- input$state
reg <- "US"
if (!is.null(state)){
if (state != "USA") {
df <- df[ df$Provider.State == input$state, ]
reg <- paste0("US-", state)
}
}
#     print(head(df$Provider.State))
#     print(head(df$Average.Total.Payments))
df <- df[order(df$Provider.State, -df$Average.Total.Payments), ]
df <- df[ df$Average.Total.Payments >= input$minrange & df$Average.Total.Payments <= input$maxrange, ]
print(input$minrange)
#     reg <- ifelse(!is.na(state), state, "US")
#     gvisGeoMap(df,
#                  locationvar="locationvar", numvar="Average.Total.Payments",
#                  options=list(region=reg, dataMode="Markers",
#                               width=500, height=400,
#                               colorAxis="{colors:['#FFFFFF', '#FF0000']}"
#                        ))
xx <- gvisGeoChart(df,  locationvar="locationvar", colorvar="Average.Total.Payments",
sizevar="Total.Discharges",
options=list(region=reg, resolution= "provinces",  dataMode="markers",
width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#FF0000']}"
), chartid="costchart")
xxx <- xx
xx <- xxx
labelvar <- "Provider.Name"
sx <- strsplit(xx$html$chart[2], "\\n")
x <- sx$jsData
pushers <- grepl(pattern="[", x=x, fixed=TRUE)
pushers <- which(pushers)[-1]
x[pushers+2] <- paste0(x[pushers+2], "\n", paste0('"', df$Provider.Name, '",'))
addcol <- grep(paste0("data.addColumn('number','Longitude');"), x=x, fixed=TRUE)
colx <- c(x[1:addcol], paste0("data.addColumn('string', 'DESCRIPTION', '", labelvar, "');"), x[(addcol+1):length(x)])
x <- paste0(colx, collapse="\n")
ssx <- strsplit(x, "\\n")
xx$html$chart[2] <- x
xx
#     gvisMap(df,
#                locationvar="locationvar", tipvar="Average.Total.Payments")
})
})
View(construct.geocode.url)
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/muschapp")
View(data)
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/muschapp")
?load()
View(data)
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/muschapp")
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/muschapp")
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/muschapp")
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/muschapp")
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/muschapp")
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/muschapp")
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/muschapp")
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/cost_util_app")
library(shiny)
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/cost_util_app")
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/cost_util_app")
View(cost_util_lat_long)
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/cost_util_app")
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/cost_util_app")
library(shiny)
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/cost_util_app")
library(shiny)
runApp("/Users/joshkelsey/desktop/NYCDSA/Project2/cost_util_app")
if (!require(devtools))
install.packages("devtools")
devtools::install_github("rstudio/leaflet")
shiny::runGitHub("rstudio/shiny-examples", subdir="063-superzip-example")
runApp("/users/joshkelsey/desktop/nycdsa/shiny_app_tests/mpg_app")
runApp("/users/joshkelsey/desktop/nycdsa/shiny_app_tests/telephone_app")
library(shiny)
runApp("/Users/joshkelsey/desktop/nycdsa/project2/cms_state_app")
library(shiny)
runApp("/Users/joshkelsey/desktop/nycdsa/project2/cms_state_app")
runApp("/Users/joshkelsey/desktop/nycdsa/project2/cms_state_app")
runApp("/Users/joshkelsey/desktop/nycdsa/project2/cms_state_app")
runApp("/users/joshkelsey/desktop/nycdsa/shiny_app_tests/telephone_app")
ip <-read.csv("Medicare_Charge_Inpatient_DRG100_DRG_Summary_by_DRGState_FY2013.csv", sep=",", fill=TRUE, header=TRUE)
average_covered_charges_ip <- select(ip, DRG.Definition, Average.Covered.Charges, Provider.State) %>%
rename(., value = Average.Covered.Charges)
average_total_payments_ip <- select(ip, DRG.Definition, Average.Total.Payments, Provider.State) %>%
rename(., value = Average.Total.Payments)
average_medicare_payments_ip <- select(ip, DRG.Definition, Average.Medicare.Payments, Provider.State) %>%
rename(., value = Average.Medicare.Payments)
runApp("/Users/joshkelsey/desktop/nycdsa/project2/cms_state_app")
runApp("/Users/joshkelsey/desktop/nycdsa/CMS_APP")
runApp("/Users/joshkelsey/desktop/nycdsa/CMS_APP")
library(shiny)
runApp("/users/joshkelsey/desktop/nycdsa/CMS_APP")
runApp("/users/joshkelsey/desktop/nycdsa/CMS_APP")
runApp("/users/joshkelsey/desktop/nycdsa/CMS_APP")
library(shiny)
runApp("/users/joshkelsey/desktop/nycdsa/CMS_APP")
library(shiny)
runApp("/Users/joshkelsey/desktop/nycdsa/project2/cms_state_app")
library(shiny)
runApp("/Users/joshkelsey/desktop/nycdsa/project2/cms_state_app")
library(shiny)
runApp("/Users/joshkelsey/desktop/nycdsa/project2/cms_state_app")
library(shiny)
runApp("/Users/joshkelsey/desktop/nycdsa/project2/cms_state_app")
library(shiny)
runApp("/Users/joshkelsey/desktop/nycdsa/project2/cms_state_app")
library(rvest)
url3 <- "https://en.wikipedia.org/wiki/List_of_Academy_Award-winning_films"
data <- html(url3)
tester <- data %>% html_nodes(".wikitable") %>% html_table() %>%
as.data.frame(.)
head(tester)
install.packages("rvest")
library(rvest)
url3 <- "https://en.wikipedia.org/wiki/List_of_Academy_Award-winning_films"
data <- html(url3)
tester <- data %>% html_nodes(".wikitable") %>% html_table() %>%
as.data.frame(.)
head(tester)
library(RJSONIO)
library (RCurl)
api <- "682cd7425157c97e3129312c9b2eed82:4:73192183" #<=== API key
q <- "ebola+outbreak" # Query string, use + instead of space
records <- 500 #how many results do we want? (Note limitations)
pageRange <- 0:(records/10-1)
dat <- c()
for (i in pageRange) {
# concatenate URL for each page
uri <- paste0("http://api.nytimes.com/svc/search/v2/articlesearch.json?q=", q,
"&page=", i, "&fl=pub_date&api-key=", api)
d <- getURL(uri)
res <- fromJSON(d,simplify = FALSE)
dat <- append(dat, unlist(res$response$docs)) # convert dates to vec + append
}
dat.conv <- strptime(dat, format="%Y-%m-%d") # need to convert dat into POSIX format
daterange <- c(min(dat.conv), max(dat.conv))
dat.all <- seq(daterange[1], daterange[2], by="day") # all possible days
# aggregate counts for dates and coerce into a data frame
cts <- as.data.frame(table(dat))
# compare dates from counts dataframe with the whole data range
# assign 0 where there is no count, otherwise take count
# (take out PSD at the end to make it comparable)
dat.all <- strptime(dat.all, format="%Y-%m-%d")
# can't seem to be able to compare Posix objects with %in%, so coerce them to character for this:
freqs <- ifelse(as.character(dat.all) %in% as.character(strptime(cts$dat, format="%Y-%m-%d")),
cts$Freq, 0)
plot (freqs, type="l", xaxt="n", main=paste("Search term(s):",q), ylab="# of articles", xlab="date")
axis(1, 1:length(freqs), dat.all)
lines(lowess(freqs, f=.2), col = 2)
library(RCurl); library(RJSONIO)
#'mykey' variable might need to be changed; create your own if it doesn't work
mykey = 'a98d04ac43156c84'
url = paste0('http://api.wunderground.com/api/',
mykey, '/conditions/forecast/q/autoip.json')
print(url)
fromurl = function(finalurl) {
web = getURL(finalurl)
raw = fromJSON(web)
high = raw$forecast$simpleforecast$forecastday[[2]]$high['celsius']
low = raw$forecast$simpleforecast$forecastday[[2]]$low['celsius']
condition = raw$forecast$simpleforecast$forecastday[[2]]$conditions
currenttemp = raw$current_observation$temp_c
currentweather = raw$current_observation$weather
city = as.character(raw$current_observation$display_location['full'])
result = list(city=city, current=paste(currenttemp, '°C ',
currentweather, sep=''),
tomorrow=paste(low, '-', high,'°C ', condition, sep=''))
names(result) = c('city', 'current', 'tomorrow')
return(result)
}
library(shiny)
runApp("/Users/joshkelsey/desktop/nycdsa/project2/cms_state_app")
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
setwd("/Users/joshkelsey/desktop/NYCDSA/Project2/cms_state_app")
shiny::runApp(host="0.0.0.0",port=3168)
